# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# variables:
#   CI_IMG: "\"${CI_REGISTRY_IMAGE}:latest\""
#   TP_URL: "${CI_PROJECT_NAMESPACE}"
#   TP_CONTACT: "${GITLAB_USER_EMAIL}"

cache:
  key: '$CI_COMMIT_REF_NAME'

stages:
  - check
  - test
  - publish
  - deploy


code-check:
  image: python:3.11.6
  stage: check
  only:
    - release
  script:
    - pip install -r yourthoughts/requirements.txt
    - python yourthoughts/manage.py check


django-tests:
  image: python:3.11.6
  stage: test
  only:
    - release
  script:
    - pip install -r yourthoughts/requirements.txt
    - pytest yourthoughts

publish-docker:
  image: docker:stable
  stage: publish
  only:
    - release
  services:
    - docker:dind
  variables:
    DOCKER_HOST: 'tcp://docker:2375'
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - echo "start pushing docker images."
    #- echo "pushing ${CI_REGISTRY_IMAGE} ${CI_REGISTRY_USER} ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}"
    # - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t yourthoughts:djangoapi-latest yourthoughts/
    - docker push yourthoughts:djangoapi-latest
    - docker build -t yourthoughts:react-latest frontend/
    - docker push yourthoughts:react-latest
    - echo "Docker built."

deploy-git:
  image: alpine:latest
  stage: deploy
  only:
    - release
  when: on_success
  before_script:
    - chmod og= $KEY
    - apk update && apk add openssh-client
    - ssh -o StrictHostKeyChecking=no -i $KEY $VM_USER@$VM "docker compose -f ~/cxl031/docker-compose.yml down || true"
    - ssh -o StrictHostKeyChecking=no -i $KEY $VM_USER@$VM "rm -rf ~/cxl031 || true"
    # - ssh -o StrictHostKeyChecking=no -i $KEY $VM_USER@$VM "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - ssh -o StrictHostKeyChecking=no -i $KEY $VM_USER@$VM "docker pull yourthoughts:djangoapi-latest"
    - ssh -o StrictHostKeyChecking=no -i $KEY $VM_USER@$VM "docker pull yourthoughts:react-latest"
  script:
    - scp -o StrictHostKeyChecking=no -i $KEY -r . $VM_USER@$VM:~/cxl031
    - ssh -o StrictHostKeyChecking=no -i $KEY $VM_USER@$VM "docker compose -f ~/cxl031/docker-compose.yml up -d"
    - ssh -o StrictHostKeyChecking=no -i $KEY $VM_USER@$VM "docker image prune -f"

#stages:          # List of stages for jobs, and their order of execution
#  - build
#  - test
#  - deploy
#
#build-job:       # This job runs in the build stage, which runs first.
#  stage: build
#  script:
#    - echo "Compiling the code..."
#    - echo "Compile complete."
#
#unit-test-job:   # This job runs in the test stage.
#  stage: test    # It only starts when the job in the build stage completes successfully.
#  script:
#    - echo "Running unit tests... This will take about 60 seconds."
#    - sleep 60
#    - echo "Code coverage is 90%"
#
#lint-test-job:   # This job also runs in the test stage.
#  stage: test    # It can run at the same time as unit-test-job (in parallel).
#  script:
#    - echo "Linting code... This will take about 10 seconds."
#    - sleep 10
#    - echo "No lint issues found."
#
#deploy-job:      # This job runs in the deploy stage.
#  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#  environment: production
#  script:
#    - echo "Deploying application..."
#    - echo "Application successfully deployed."
